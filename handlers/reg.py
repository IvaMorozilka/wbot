from aiogram import Router, F
from aiogram.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
)
from datetime import datetime

from keyboards.all_kb import main_kb
from keyboards.inline_kbs import register_request_kb
from aiogram.fsm.context import FSMContext
from db_handler.db_funk import (
    insert_user,
    get_admins,
    send_registration_request,
    get_update_request_info,
)
from handlers.states import States
from create_bot import ADMINS, bot
from utils.data import RegistrationCallback


reg_router = Router()


@reg_router.message(F.text, States.form_full_name)
async def capture_fullname(message: Message, state: FSMContext):
    await state.update_data(
        {
            "full_name": message.text,
            "user_id": message.from_user.id,
            "username": f"{message.from_user.username if message.from_user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}",
        }
    )
    await message.answer(f"{message.text}, –∏–∑ –∫–∞–∫–æ–π –≤—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏?")
    await state.set_state(States.form_org_name)


@reg_router.message(F.text, States.form_org_name)
async def capture_orgname(message: Message, state: FSMContext):
    await state.update_data(org_name=message.text)
    data = await state.get_data()
    await message.answer(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n\n<b>–§–ò–û</b>: {data.get('full_name')}\n<b>–û–≥—Ä–∞–Ω–∏–∑–∞—Ü–∏—è</b>: {data.get('org_name')}",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data="correct"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–Ω–∞—á–∞–ª–∞",
                        callback_data="incorrect",
                    )
                ],
            ]
        ),
    )
    await state.set_state(States.check_state)


@reg_router.callback_query(F.data == "correct", States.check_state)
async def finish_form(call: CallbackQuery, state: FSMContext):
    await call.answer()
    data = await state.get_data()
    if call.from_user.id in ADMINS:
        await insert_user({**data, "admin": True})
        await call.message.edit_text(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –í—ã –±—ã–ª–∏ —É–∫–∞–∑–∞–Ω—ã –≤ —Å–ø–∏—Å–∫–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ üë®üèª‚Äçüíª"
        )
    else:
        await send_registration_request({**data, "admin": False, "status": 0})
        await call.message.edit_text(
            text="–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º üì® –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ä–µ—à–µ–Ω–∏–µ–º.",
            reply_markup=None,
        )
        admins_info = await get_admins()
        for user_id in [admin["user_id"] for admin in admins_info]:
            await bot.send_message(
                chat_id=user_id,
                text=f"<b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</b> üôã‚Äç‚ôÇÔ∏è\n\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%d-%m-%y %H:%M')}\n–ò–º—è: {data.get('full_name')}{data.get('username')}\n–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {data.get('org_name')}",
                reply_markup=register_request_kb(data.get("user_id")),
            )
    await state.clear()


@reg_router.callback_query(F.data == "incorrect", States.check_state)
async def finish_form(call: CallbackQuery, state: FSMContext):  # noqa: F811
    await call.answer()
    await call.message.answer("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.")
    await call.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –§–ò–û, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
    )
    await state.set_state(States.form_full_name)


@reg_router.callback_query(RegistrationCallback.filter(F.action == "a"))
async def accept_registration(call: CallbackQuery, callback_data: RegistrationCallback):
    user_info = await get_update_request_info(user_id=callback_data.user_id, status=1)

    if user_info.get("processed"):
        await call.message.edit_text("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ‚ÑπÔ∏è")
        return
    # –î–µ–ª–∞–µ–º –≤—Å—Ç–∞–≤–∫—É –±–µ–∑ status –∏ processed
    await insert_user(
        {k: v for k, v in user_info.items() if k not in {"status", "processed"}}
    )
    await process_request(user_info.get("user_id"))
    await call.message.edit_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info.get('full_name')}, {user_info.get('username')} –ø—Ä–∏–Ω—è—Ç ‚úÖ"
    )

    await bot.send_message(
        chat_id=callback_data.user_id,
        text="–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –ø—Ä–∏–Ω—è—Ç ü•≥. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.",
        reply_markup=main_kb(),
    )


@reg_router.callback_query(RegistrationCallback.filter(F.action == "r"))
async def reject_registration(call: CallbackQuery, callback_data: RegistrationCallback):
    user_info = await get_update_request_info(user_id=callback_data.user_id, status=2)

    if user_info.get("processed"):
        await call.message.edit_text("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ‚ÑπÔ∏è")
        return

    await call.message.edit_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info.get('full_name')}, {user_info.get('username')} –æ—Ç–∫–ª–æ–Ω–µ–Ω ‚õî"
    )
    await process_request(user_info.get("user_id"))
    await bot.send_message(
        chat_id=callback_data.user_id,
        text="–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω üòî",
        reply_markup=main_kb(),
    )
