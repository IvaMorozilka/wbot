from aiogram import Router, F
from aiogram.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
)

from keyboards.all_kb import main_kb
from aiogram.fsm.context import FSMContext
from db_handler.db_funk import get_user_info, insert_user
from handlers.states import States
from filters.user_auth_check import IsAuthorized, users_cache
from create_bot import secret_key, ADMINS


reg_router = Router()


@reg_router.message(F.text, States.form_auth_key)
async def capture_authkey(message: Message, state: FSMContext):
    if message.text == secret_key:
        await message.answer("–í–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")
        await state.set_state(States.form_full_name)
    else:
        await message.answer("–í–∞—à –∫–æ–¥ –∞–≤—Ç–æ—Ä–∞–∑–∏—Ü–∏–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π, –≤ –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ.")
        await state.clear()


@reg_router.message(F.text, States.form_full_name)
async def capture_fullname(message: Message, state: FSMContext):
    await state.update_data(
        {
            "full_name": message.text,
            "user_id": message.from_user.id,
            "chat_id": message.chat.id,
            "username": f"{message.from_user.username if message.from_user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}",
        }
    )
    await message.answer(f"{message.text}, –∏–∑ –∫–∞–∫–æ–π –≤—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏?")
    await state.set_state(States.form_org_name)


@reg_router.message(F.text, States.form_org_name)
async def capture_orgname(message: Message, state: FSMContext):
    await state.update_data(org_name=message.text)
    data = await state.get_data()
    await message.answer(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n\n<b>–§–ò–û</b>: {data.get('full_name')}\n<b>–û–≥—Ä–∞–Ω–∏–∑–∞—Ü–∏—è</b>: {data.get('org_name')}",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ–í—Å–µ –≤–µ—Ä–Ω–æ", callback_data="correct")],
                [
                    InlineKeyboardButton(
                        text="‚ùå–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="incorrect"
                    )
                ],
            ]
        ),
    )
    await state.set_state(States.check_state)


@reg_router.callback_query(F.data == "correct", States.check_state)
async def finish_form(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if call.from_user.id in ADMINS:
        await insert_user({**data, "admin": True, "reciever": True})
    else:
        await insert_user({**data, "admin": False, "reciever": False})
    await call.message.edit_text(
        text="–ë–ª–∞–≥–æ–¥–∞—Ä—é, –≤–∞—à–∏ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=None
    )
    await call.message.answer(
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é üìã", reply_markup=main_kb(call.message.from_user.id)
    )
    await state.clear()


@reg_router.callback_query(F.data == "incorrect", States.check_state)
async def finish_form(call: CallbackQuery, state: FSMContext):  # noqa: F811
    await call.answer()
    await call.message.answer("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.")
    await call.message.answer("–í–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")
    await state.set_state(States.form_full_name)
