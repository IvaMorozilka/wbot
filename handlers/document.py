import io
from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    ErrorEvent,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import ExceptionTypeFilter
from aiogram.fsm.context import FSMContext

from keyboards.all_kb import main_kb
from keyboards.inline_kbs import goback_actions_kb, main_loader_kb
from create_bot import bot
from utils.excel_helpers.checker import check_document_by_category
from utils.helpers import download_document_to_bytes, send_document
from utils.constants import DASHBOARD_NAMES, DASHBOARD_CALLBACKS, INSTRUCTIONS_IMAGES
from handlers.states import States
from db_handler.db_funk import get_user_info
from utils.constants import InstructionsCallback


document_router = Router()


@document_router.callback_query(F.data.in_({"back"}))
async def process_change_mind(call: CallbackQuery, state: FSMContext):
    if call.data == "back":
        await call.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—à–±–æ—Ä–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:",
            reply_markup=main_loader_kb(),
        )
        await call.answer()
        await state.set_state(States.waiting_for_option)


@document_router.message(~F.data, States.waiting_for_option)
async def process_option_choice(message: Message, state: FSMContext):  # noqa: F811
    await message.reply(text="‚¨ÜÔ∏è–Ø –∂–¥—É, –ø–æ–∫–∞ –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ –¥–∞—à–±–æ—Ä–¥")
    await state.update_data(States.waiting_for_option)


@document_router.callback_query(
    F.data.in_(DASHBOARD_CALLBACKS),
    States.waiting_for_option,
)
async def process_option_choice(call: CallbackQuery, state: FSMContext):  # noqa: F811
    option_name = call.data
    await state.update_data(option=option_name)

    if option_name != "–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è–ü–æ–º–æ—â—å–°–í–û":
        await call.answer("–î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è –ø–æ–º–æ—â—å –°–í–û")
        return

    await call.answer()
    await call.message.edit_text(
        text=f"–í—ã–±—Ä–∞–Ω –¥–∞—à–±–æ—Ä–¥ <b>{option_name}</b>.\n–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ üß∑ –¥–æ–∫—É–º–µ–Ω—Ç üìÑ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚¨áÔ∏è",
        reply_markup=goback_actions_kb(),
    )
    await state.set_state(States.waiting_for_document)


@document_router.callback_query(
    F.data.in_(DASHBOARD_CALLBACKS), States.waiting_for_document
)
async def process_option_choice(call: CallbackQuery, state: FSMContext):  # noqa: F811
    data = await state.get_data()
    option = data.get("option")
    await call.answer(f"–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ {option}. –ñ–¥—É –æ—Ç –≤–∞—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
    await state.set_state(States.waiting_for_document)


@document_router.message(~F.document, States.waiting_for_document)
async def process_document(message: Message, state: FSMContext):
    await message.reply("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É.")
    await state.set_state(States.waiting_for_document)


@document_router.callback_query(F.data == "show_instruction")
async def send_instruction(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    option = data.get("option", "")
    if option:
        instr = FSInputFile(INSTRUCTIONS_IMAGES[option])
        await call.message.answer_photo(
            photo=instr, caption="–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @azmsus"
        )
        await call.answer()
    else:
        await call.answer("–î–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–∞—à–±–æ—Ä–¥")


@document_router.message(F.document, States.waiting_for_document)
async def process_document(message: Message, state: FSMContext):  # noqa: F811
    data = await state.get_data()
    dshb_name = data.get("option")

    if not message.document.file_name.endswith((".xlsx", ".xlsm", ".xltx", ".xltm")):
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–±–ª–∏—Ü Excel.\n‚ÑπÔ∏è–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ xlsx/xlsm/xltx/xltm"
        )
        return

    # Getting file info
    file_id = message.document.file_id

    # Downloading to bytes
    file_io = io.BytesIO()
    await message.bot.download(message.document, destination=file_io)
    file_io.seek(0)
    if not file_io:
        await message.answer("–ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à —Ñ–∞–π–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑")
        return

    # Cheking + processing stage
    # 1 - Checking for correct headers
    result, errors = check_document_by_category(file_bytes=file_io, category=dshb_name)
    if not result:
        await message.answer(
            f"{errors}\n‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
            reply_markup=(
                InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é",
                                callback_data="show_instruction",
                            ),
                            InlineKeyboardButton(
                                text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É", callback_data="back"
                            ),
                        ]
                    ]
                )
            ),
        )

        await message.answer_photo(
            photo=FSInputFile(path="assets/instr_humaid.jpg"),
            caption="–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π—é",
        )
        return

    # Sending ...
    user_info = await get_user_info(message.from_user.id)
    caption_text = f"üìÑ –í–∞–º –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç!\n\n<b>–î–ª—è –¥–∞—à–±–æ—Ä–¥–∞:</b> {dshb_name}\n<b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> {user_info['full_name']}, @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n<b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {user_info['org_name']}"
    total_users, users_ids_without_send = await send_document(
        file_id, message, caption_text
    )
    user_names = ["–°–∫–æ—Ä–æ –±—É–¥–µ—Ç. –ü–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"]

    if len(users_ids_without_send) == total_users:
        await message.answer(
            "üî¥–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –µ—â–µ —Ä–∞–∑. –ï—Å–ª–∏ –æ–Ω —Ç–∞–∫ –∂–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        return
    elif len(users_ids_without_send) != 0:
        await message.reply(
            f"üü°–î–æ–∫—É–º–µ–Ω—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º, –∫—Ä–æ–º–µ:\n({'\n'.join(user_names)})"
        )
        await state.clear()
    else:
        await message.reply(
            "üèÅ–í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            reply_markup=main_kb(),
        )
        await state.clear()

    await state.clear()


@document_router.error(
    ExceptionTypeFilter(TelegramBadRequest), F.update.message.as_("message")
)
async def handle_big_file_size(event: ErrorEvent, message: Message):
    if str(event.exception).endswith("file is too big"):
        await message.reply(
            "–†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ –±–æ–ª—å—à–µ <b>20–ú–ë</b> üëÄ. –≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram API. –ñ–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
        )


# @document_router.message(F.document)
# async def handle_document(message: Message):
#     if not message.document.file_name.endswith((".xlsx")):
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx).")
#         return

#     async with ChatActionSender.upload_document(chat_id=message.chat.id, bot=bot):
#         await message.answer("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

#         # Downloading...
#         file_id = message.document.file_id
#         file = await bot.get_file(file_id)
#         file_path = file.file_path
#         file_name = message.document.file_name

#         downloaded_file = await bot.download_file(file_path)
#         os.makedirs(download_dir, exist_ok=True)
#         local_file_path = os.path.join(download_dir, f"{file_name}")
#         with open(local_file_path, "wb") as new_file:
#             new_file.write(downloaded_file.read())
#         # End download process

#         # Start processing...
#         processed_file_path = os.path.join(download_dir, f"–û–ë–†–ê–ë–û–¢–ê–ù_{file_name}")
#         code, msg, warnings, logs = transform_pipeline(
#             local_file_path, processed_file_path
#         )
#         # Errors handle
#         if not code:
#             await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ‚ùå\n{msg}")
#         else:
#             if len(warnings) != 0:
#                 await message.answer(
#                     f"‚ö†Ô∏è<b>–í–Ω–∏–º–∞–Ω–∏–µ</b>‚ö†Ô∏è\n{''.join(f'{idx}. {item}\n' for idx, item in enumerate(warnings))}"
#                 )
#                 await message.answer("ü™µ–õ–æ–≥–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–πü™µ\n")
#                 await message.answer(
#                     "–†–∞—Å—á–µ—Ç (–†–£–ë–õ–ò)\n"
#                     + "\n".join(
#                         f"{key}: <code>={value}</code>"
#                         for key, value in logs[0].items()
#                     )
#                 )
#                 await message.answer(
#                     "–†–∞—Å—á–µ—Ç (–ü–†–û–¶–ï–ù–¢–´)\n"
#                     + "\n".join(
#                         f"{key}: <code>={value}</code>"
#                         for key, value in logs[1].items()
#                     )
#                 )
#             await message.answer("‚úÖ<b>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚úÖ</b>")
#             await message.reply_document(document=FSInputFile(processed_file_path))

#         # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
#         os.remove(local_file_path)
#         os.remove(processed_file_path)
