from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from keyboards.all_kb import main_kb
from keyboards.inline_kbs import main_loader_kb, goback_actions_kb
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from utils.script import process_document_by_option
import asyncio
import os

from filters.admin_check import IsAdmin
from create_bot import admins, download_dir, bot, upload_notification_recievers

menu_router = Router()


class DocumentProcessing(StatesGroup):
    option = State()
    document = State()
    bot_error_msg_id = State()
    bot_back_msg_id = State()
    bot_early_doc_msg_id = State()


@menu_router.message(F.text == "‚¨áÔ∏è–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞")
async def show_upload_options(message: Message, state: FSMContext):
    data = await state.get_data()
    bot_back_msg_id = data.get("bot_back_msg_id")
    await message.delete()
    if bot_back_msg_id:
        await bot.delete_message(message.chat.id, bot_back_msg_id)
    await state.clear()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—à–±–æ—Ä–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:",
        reply_markup=main_loader_kb(),
    )
    await state.set_state(DocumentProcessing.option)


@menu_router.message(F.text == "üõü–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def show_support_options(message: Message):
    await message.delete()
    await message.answer(
        text="üêû–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞:\nüëâüèæ–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç\nüëâüèæ–£ –≤–∞—Å –ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –º–µ–Ω—é\nüëâüèæ–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞\nüí¨–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, –∫–æ–º–∞–Ω–¥–æ–π /restart.\n–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @Bobflipflop\n\n‚ùì–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ –ø–æ–≤–æ–¥—É –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å - @mkuzhlev",
        reply_markup=main_kb(message.from_user.id),
    )

@menu_router.message(F.text == "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_support_options(message: Message):
    await message.delete()
    await message.answer(
        text="–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. ‚òπ",
        reply_markup=main_kb(message.from_user.id),
    )


@menu_router.message(Command("restart"))
async def restart_bot(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üîÑ–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ!", reply_markup=main_kb(message.from_user.id)
    )


@menu_router.callback_query(F.data == "change_mind")
async def process_change_mind(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    bot_error_msg_id = data.get("bot_error_msg_id")

    await call.message.delete()
    if bot_error_msg_id:
        await call.bot.delete_message(
            chat_id=call.message.chat.id, message_id=bot_error_msg_id
        )
    back_msg = await call.message.answer(
        text="–í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –∫ –º–µ–Ω—é.", reply_markup=main_kb(call.from_user.id)
    )
    await state.clear()
    await state.update_data(bot_back_msg_id=back_msg.message_id)


@menu_router.message(F.text, DocumentProcessing.option)
async def process_option_choice(message: Message):
    await message.delete()


@menu_router.message(F.document, DocumentProcessing.option)
async def process_option_choice(message: Message, state: FSMContext):
    data = await state.get_data()
    bot_early_doc_msg_id = data.get("bot_early_doc_msg_id")

    await message.delete()
    if bot_early_doc_msg_id:
        await bot.delete_message(message.chat.id, bot_early_doc_msg_id)
        await state.update_data(bot_early_doc_msg_id=None)

    new_msg = await message.answer(
        text="‚¨ÜÔ∏è–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö."
    )
    await state.update_data(bot_early_doc_msg_id=new_msg.message_id)


@menu_router.callback_query(F.data, DocumentProcessing.option)
async def process_option_choice(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    bot_early_doc_msg_id = data.get("bot_early_doc_msg_id")

    if bot_early_doc_msg_id:
        await bot.delete_message(call.message.chat.id, bot_early_doc_msg_id)
        await state.update_data(bot_early_doc_msg_id=None)

    option_name = call.data
    await state.update_data(option=option_name)
    await call.message.edit_text(
        text=f"–í—ã–±—Ä–∞–Ω –¥–∞—à–±–æ—Ä–¥ <b>{option_name}</b>. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤–ª–æ–∂–µ–Ω–∏–µ–º, –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
        reply_markup=goback_actions_kb(),
    )
    await state.set_state(DocumentProcessing.document)


@menu_router.callback_query(F.data == "back", DocumentProcessing.document)
async def process_back_button(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    bot_error_msg_id = data.get("bot_error_msg_id")
    if bot_error_msg_id:
        await call.bot.delete_message(
            chat_id=call.message.chat.id, message_id=bot_error_msg_id
        )
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—à–±–æ—Ä–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:",
        reply_markup=main_loader_kb(),
    )
    await state.update_data(bot_error_msg_id=None)
    await state.set_state(DocumentProcessing.option)


@menu_router.message(~F.document, DocumentProcessing.document)
async def process_document(message: Message, state: FSMContext):
    data = await state.get_data()
    bot_error_msg_id = data.get("bot_error_msg_id")
    await message.delete()
    if bot_error_msg_id:
        await bot.delete_message(chat_id=message.chat.id, message_id=bot_error_msg_id)
    error_message = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç.")
    await state.update_data(bot_error_msg_id=error_message.message_id)
    await state.set_state(DocumentProcessing.document)


@menu_router.message(F.document, DocumentProcessing.document)
async def process_document(message: Message, state: FSMContext):
    data = await state.get_data()
    dshb_name = data.get("option")

    if not message.document.file_name.endswith((".xlsx",)):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ .xlsx"
        )
        return

    # Getting file info
    file_id = message.document.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    file_name = message.document.file_name

    # Downloading
    try: 
        downloaded_file = await bot.download_file(file_path)
        os.makedirs(download_dir, exist_ok=True)
        local_file_path = os.path.join(download_dir, f"{file_name}")
        with open(local_file_path, "wb") as new_file:
            new_file.write(downloaded_file.read())
    except Exception as e:
        print(f'–°–û–•–†–ê–ù–ï–ù–ò–ï –§–ê–ô–õ–ê - –û–®–ò–ë–ö–ê: {e}')

    # End download process
    data = await state.get_data()

    # result = process_document_by_option(
    #     local_file_path, local_file_path, data.get("option")
    # )
    caption_message = f"üìÑ –í–∞–º –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç!\n\n<b>–î–ª—è –¥–∞—à–±–æ—Ä–¥–∞:</b> {dshb_name}\n<b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> {message.from_user.full_name}, @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"

    for user_id in upload_notification_recievers:
        try:
            await bot.send_document(
                chat_id=user_id,  # ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                document=file_id,  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                caption=caption_message,  # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥ —Ñ–∞–π–ª–æ–º
            )
        except Exception as e:
            print(e)

        await asyncio.sleep(0.5)
    await message.answer("üü¢–î–æ–∫—É–º–µ–Ω—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É –ª–∏—Ü—É")
    await state.clear()
